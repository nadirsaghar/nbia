<?xml version="1.0" encoding="utf-8" ?>
<!--
$Id: build.xml 14216 2011-04-08 18:43:54Z kascice $
$HeadURL: https://ncisvn.nci.nih.gov/svn/nbia/trunk/software/build/build.xml $
-->
<project name="nbia-build"
         default="build:all"
         basedir="."
         xmlns:ivy="antlib:org.apache.ivy.ant">
  <description>
    This file is used to build, bundle and deploy the NBIA application.  The build targets of this file calls the appropriate targets in all the sub-projects.  The dist targets create a distribution that can be used by the local (a directory) and remote (a zip archive) deployment targets.  The deploy targets handle local and remote installation of the application.   The distribution is installed via ant.  Both install and upgrade distributions/installs are supported.
  </description>



  <!-- Property file related properties and tasks -->
  <property environment="env" />
  <!-- tier independent properties -->
  <property file="local.properties" />
  <property file="project.properties" />
  <property name="properties.file" value="install.properties"/>

  <!-- **** begin: dealing with properties file chicanery -->
  <!-- if you want upgrade properties you must pass in -Dproperties.file=*upgrade.properties
       Otherwise this code will pick the install properties for the platform as the default.
       install is a superset of upgrade so this should be safe even if it's slightly heavy handed -->
  <replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=(.*[\w\d\/\{\}\\]+)[ \t]+\r*$" replace="\1=\2"/>
  <replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=[ \t]+(.*[\w\d\/\{\}\\]+)\r*$" replace="\1=\2"/>
  <available file="${properties.file}" property="properties.file.exists" />

  <property file="${properties.file}" />

  <!-- added for remote deployments since file is copied to root of dist.relative.dir -->
  <basename property="properties.file.name" file="${properties.file}"/>
  <!-- **** end: dealing with properties file chicanery -->

  <!-- Set application.base.path based on platform -->
  <condition property="application.base.path" value="${application.base.path.linux}">
    <or>
      <os family="unix" />
      <os family="mac" />
    </or>
  </condition>

  <condition property="application.base.path" value="${application.base.path.windows}">
    <os family="windows" />
  </condition>

  <!-- do these really need to be in build.xml?  deployment properties i believe -->
  <property name="jboss.relative.path" value="${jboss.binaries.relative.dir}"/>
  <property name="jboss.home" value="${application.base.path}/${jboss.relative.path}"/>
  <property name="ncia-core-grid.jboss.home" value="${application.base.path}/${ncia-core-grid.jboss.relative.path}"/>
  <property name="ncia-core-grid-unsecured.jboss.home" value="${application.base.path}/${ncia-core-grid-unsecured.jboss.relative.path}"/>
  <property name="nbia-grid.jboss.home" value="${application.base.path}/${nbia-grid.jboss.relative.path}"/>

  <!-- BDA standard structure -->
  <property name="build.dir" location="." />
  <property name="software.dir" location=".." />
  <property name="common.dir" location="${software.dir}/common" />
  <property name="local.repo.dir" location="${software.dir}/local-ivy-repo" />
  <property name="target.dir" location="${software.dir}/target" />
  <property name="bda-download.dir" location="${common.dir}/bda-download" />
  <property name="ivy.settings.dir" location="${common.dir}/ivy" />
  <property name="lib.dir" location="${target.dir}/lib" />
  <property name="temp.dir" location="${target.dir}/temp" />
  <property name="reports.dir" location="${target.dir}/reports" />
  <property name="bda-utils.dir" location="${target.dir}/bda-utils" />
  <property name="log.dir" location="${target.dir}/logs" />
  <property name="dist.dir" location="${target.dir}/dist" />
  <property name="download.dir" location="${target.dir}/download" />
  <property name="pt.dir" location="${target.dir}/persistent-transient" />

  <!-- Generic build time properties -->
  <property name="project.name" value="nbia"/>
  <property name="nbia.build.file" value="build.xml"/>

  <!-- Sourcebase layout properties -->
  <property name="resources.dir" value="${software.dir}/resources" />
  <property name="nbia-dao.base.dir" value="${software.dir}/nbia-dao"/>
  <property name="ncia-core-grid.base.dir" value="${software.dir}/ncia-core-grid-transfer"/>
  <property name="nbia-grid.base.dir" value="${software.dir}/nbia-service"/>
  <property name="nbia-ctp.base.dir" value="${software.dir}/nbia-ctp-working"/>
  <property name="nbia-services-commons.base.dir" value="${software.dir}/nbia-services-commons"/>
  <property name="image-zipping-mdb.base.dir" value="${software.dir}/image-zipping-mdb"/>
  <property name="image-deletion-mdb.base.dir" value="${software.dir}/image-deletion-mdb"/>
  <property name="nbia-services-grid.base.dir" value="${software.dir}/nbia-services-grid"/>
  <property name="nbia-domain.base.dir" value="${software.dir}/nbia-domain"/>
  <property name="nbia-web.base.dir" value="${software.dir}/nbia-web"/>
  <property name="nbia-download-manager.base.dir" value="${software.dir}/nbia-download-manager"/>
  <property name="nbia-download.base.dir" value="${software.dir}/nbia-download"/>
  <property name="nbia-remote-search.base.dir" value="${software.dir}/nbia-remote-search" />
  <property name="global.ivy.settings.file" location="${software.dir}/common/ivysettings.xml" />
  <property name="db-install.src.dir" value="${common.dir}/resources/db/" />
  <property name="db-upgrade.src.dir" value="${common.dir}/resources/db-incr/" />
  <property name="nbia-resource.artifact.dir" value="${software.dir}/common/resources" />

  <!-- targets -->
  <property name="nbia-ctp.build.target" value="all"/>
  <property name="nbia-services-commons.build.target" value="run"/>
  <property name="nbia-dao.build.target" value="run"/>
  <property name="nbia-services-grid.build.target" value="run"/>
  <property name="nbia-domain.build.target" value="all"/>
  <property name="nbia-web.build.target" value="run"/>
  <property name="nbia-download-manager.build.target" value="run"/>
  <property name="nbia-download.build.target" value="run"/>
  <!-- Default install time targets passed by deploy targets to the installer, can be overridden by being set on the command line if different target is desitred.  -->
  <property name="install.target" value="install"/>
  <property name="upgrade.target" value="upgrade"/>
  <property name="upgrade.jboss.target" value="upgrade:jboss"/>
  <property name="upgrade.ncia-core-grid.target" value="upgrade:ncia-core-grid"/>
  <property name="upgrade.ncia-core-grid-unsecured.target" value="upgrade:ncia-core-grid-unsecured"/>
  <property name="upgrade.nbia-grid.target" value="upgrade:nbia-grid"/>
  <property name="install.jboss.target" value="install:jboss"/>
  <property name="install.ncia-core-grid.target" value="install:ncia-core-grid"/>
  <property name="install.ncia-core-grid-unsecured.target" value="install:ncia-core-grid-unsecured"/>
  <property name="install.nbia-grid.target" value="install:nbia-grid"/>
  <property name="ctp.install.target" value="install:ctp:server"/>
  <property name="ctp.upgrade.target" value="upgrade:ctp:server"/>

  <!-- output directory properties -->
  <property name="ncia-core-grid.artifact.dir" value="${ncia-core-grid.base.dir}/target" />
  <property name="nbia-grid.artifact.dir" value="${nbia-grid.base.dir}/target" />
  <property name="nbia-ctp.artifact.dir" value="${nbia-ctp.base.dir}/target" />


  <!-- Distribution Structure properties, used to copy files into the distribution area.
       Use project.propertie relative dir names becasue they are used by install also -->
  <property name="dist.exploded.dir" value="${dist.dir}/exploded" />
  <property name="tools.dist.dir" value="${dist.exploded.dir}/${tools.dist.relative.dir}" />
  <property name="common.dist.dir" value="${dist.exploded.dir}/${common.dist.relative.dir}" />
  <property name="db-install.dist.dir" value="${dist.exploded.dir}/${db-install.dist.relative.dir}/" />
  <property name="db-upgrade.dist.dir" value="${dist.exploded.dir}/${db-upgrade.dist.relative.dir}" />
  <property name="jboss-conf.dist.dir" value="${dist.exploded.dir}/${jboss-conf.dist.relative.dir}" />
  <property name="ncia-core-grid.dist.dir" value="${dist.exploded.dir}/${ncia-core-grid.dist.relative.dir}"/>
  <property name="nbia-grid.dist.dir" value="${dist.exploded.dir}/${nbia-grid.dist.relative.dir}"/>
  <property name="nbia-ctp.dist.dir" value="${dist.exploded.dir}/${nbia-ctp.dist.relative.dir}"/>
  <property name="nbia-web.dist.dir" value="${dist.exploded.dir}/${nbia-web.dist.relative.dir}"/>
  <property name="tools.dist.dir" value="${dist.exploded.dir}/${tools.dist.relative.dir}" />

  <!-- locally used paths, not needed by install -->
  <property name="jboss.dest.file" value="${download.dir}/${jboss.binaries.file}"/>
  <property name="jai.linux.dest.file" value="${download.dir}/${jai.linux.binaries.file}"/>
  <property name="jai.windows.dest.file" value="${download.dir}/${jai.windows.binaries.file}"/>
  <property name="ws-core.dest.file" value="${download.dir}/${ws-core.binaries.file}"/>

  <property name="jar-signing.keystore.abs-location" location="${jar-signing.keystore.location}"/>

  <!-- Where grand stores it's outputed pdf reports of build files -->
  <property name="grand.rpt.dir" value="${reports.dir}/grand" />

  <property name="jbosscp.dest.file" value="${download.dir}/${jbosscp.binaries.file}" />

  <available file="${jbosscp.dest.file}" property="jbosscp.tools.exists" />

  <!-- Paths -->
  <path id="project.classpath">
    <fileset dir="${lib.dir}">
      <include name="ivy-*.jar" />
    </fileset>
  </path>

  <path id="bda-utils.classpath">
    <fileset dir="${bda-utils.dir}">
      <include name="**/*.jar" />
    </fileset>
  </path>

  <!-- retrive ivy files then retrieve bda files and librarires -->
  <property name="bda-download.file" value="bda-ivy-build.xml" />
  <!-- Use the snippet below if you want these to be transcient files
  <mkdir dir="${bda-download.dir}" />
  <property name="bda-download.src.url" value="http://gforge.nci.nih.gov/svnroot/automation/trunk/software/bda-download/${bda-download.file}" />
  <get src="${bda-download.src.url}" dest="${bda-download.dir}/${bda-download.file}" />
  -->


  <ant inheritAll="false" inheritRefs="false" antfile="${bda-download.file}" target="retrieve-bda" dir="${bda-download.dir}">
    <property name="bda.version" value="${bda.version}" />
    <property name="bda-utils.dir" location="${bda-utils.dir}" />
    <property name="lib.dir" location="${lib.dir}" />
    <property name="software.dir" location="${software.dir}" />
    <!-- This property is only required when being built from automation/software/bda-build-templates/software/build -->
    <property name="bda.local.repo.dir" location="../../../bda-local-ivy-repo" />
  </ant>


  <!-- Task definitions -->
  <taskdef uri="antlib:org.apache.ant.antunit" resource="org/apache/ant/antunit/antlib.xml" classpathref="bda-utils.classpath"/>
  <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="project.classpath"/>
  <taskdef name="for" classname="net.sf.antcontrib.logic.ForTask" classpathref="bda-utils.classpath"/>

  <!-- Includes- include BDA marcos -->
  <import file="${bda-utils.dir}/bda-build-utils-${bda.version}.xml" />

  <!-- Conditionals -->
  <available file="${jboss.home}/server/default/conf/jboss-service.xml" property="jboss.exists"/>

  <!-- Start logging -->
  <mkdir dir="${log.dir}" />
  <mkdir dir="${download.dir}" />
  <tstamp>
    <format property="install.time" pattern="yyyy-MM-dd-HH-mm" />
  </tstamp>
  <record name="${log.dir}/install-${install.time}.log" action="start"/>
  <!-- set some db variables -->
  <switch value="${database.type}">
    <case value="oracle">
      <property name="database.dialect" value="org.hibernate.dialect.OracleDialect"/>
      <property name="database.driver.file" value="${bda-utils.dir}/ojdbc14-10.2.0.3.0.jar"/>
      <property name="database.driver" value="oracle.jdbc.driver.OracleDriver"/>
    </case>
    <case value="mysql">
      <property name="database.dialect" value="org.hibernate.dialect.MySQLDialect"/>
      <property name="database.driver.file" value="${bda-utils.dir}/mysql-connector-java-5.0.8.jar"/>
      <property name="database.driver" value="com.mysql.jdbc.Driver"/>
      <property name="database.schema" value="${database.name}"/>
    </case>
    <default>
      <!--
      <fail message="Invalid database type ${database.type}"/>
        -->
    </default>
  </switch>
  <path id="jdbc.driver.classpath">
    <pathelement location="${database.driver.file}"/>
  </path>

  <import file="javadoc.xml"/>
  <import file="macrodefs.xml"/>
  <import file="eclipse-util.xml"/>

  <!-- Targets -->
  <import file="developer-conveniences.xml"/>

  <target name="ivy-simian"
          if="static.analysis">
    <ivy:settings file="${global.ivy.settings.file}"/>
    <ivy:resolve refresh="true" file="${common.dir}/simian/ivy.xml" />
    <ivy:retrieve pattern="${dist.exploded.dir}/simian/[artifact]-[revision].[ext]"/>
  </target>

  <target name="static-analysis:simian"
          depends="ivy-simian"
          if="static.analysis"
          description="Performs code duplication analysis">

    <path id="simian.classpath">
      <fileset dir="${dist.exploded.dir}/simian">
        <include name="*.jar" />
      </fileset>
    </path>
    <taskdef resource="simiantask.properties" classpathref="simian.classpath" />

    <simian>
      <fileset dir="${software.dir}/nbia-services-commons/src" includes="**/*.java"/>
      <fileset dir="${software.dir}/nbia-services-grid/src" includes="**/*.java"/>
      <fileset dir="${software.dir}/nbia-web/src" includes="**/*.java"/>
      <fileset dir="${software.dir}/nbia-ctp/src" includes="**/*.java"/>
      <fileset dir="${software.dir}/nbia-download/src" includes="**/*.java"/>
      <fileset dir="${software.dir}/nbia-download-manager/src" includes="**/*.java"/>
      <formatter type="xml" toFile="${reports.dir}/simian-log.xml"/>
    </simian>
    <xslt in="${reports.dir}/simian-log.xml"
           out="${reports.dir}/simian-log.html"
          style="${common.dir}/simian/simian.xsl" />
  </target>



  <target name="diagnostics" description="diagnostics">
    <echoproperties/>
    <diagnostics/>
  </target>

  <target name="compute-tag-properties">
    <condition property="tagged.file">
      <contains substring="nbia/tags"
                string="${nbia_prod_build_tag}"/>
    </condition>

    <if>
      <isset property="tagged.file"/>
      <then>
        <propertyregex property="nbia_prod_build_tag.final"
                       input="${nbia_prod_build_tag}"
                       regexp="\$HeadURL\: .*/nbia/tags/([^/]*)/.*"
                       select="\1"/>
      </then>
      <else>
        <property name="nbia_prod_build_tag.final" value="dev-snapshot ${DSTAMP} ${TSTAMP}"/>
      </else>
    </if>
  </target>

  <target name="clean">
    <delete dir="${dist.dir}"/>
    <delete dir="${temp.dir}"/>
    <delete dir="${ncia-core-grid.artifact.dir}"/>
    <delete dir="${nbia-grid.artifact.dir}"/>
    <delete>
      <fileset dir="${lib.dir}">
        <include name="nbia*" />
        <include name="ncia*" />
      </fileset>
    </delete>
  </target>

  <target name="init" >
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${dist.exploded.dir}"/>
    <mkdir dir="${ncia-core-grid.artifact.dir}"/>
    <mkdir dir="${nbia-grid.artifact.dir}"/>
    <mkdir dir="${ncia-core-grid.dist.dir}"/>
    <mkdir dir="${nbia-grid.dist.dir}"/>
    <mkdir dir="${nbia-web.dist.dir}"/>
    <mkdir dir="${db-install.dist.dir}"/>
    <mkdir dir="${db-upgrade.dist.dir}"/>
    <mkdir dir="${tools.dist.dir}"/>
    <mkdir dir="${reports.dir}"/>
    <mkdir dir="${download.dir}"/>
    <mkdir dir="${lib.dir}"/>

    <!-- start from scratch to make sure no stale
         lib definitinos, esp during dev -->
    <available file="${jboss.dest.file}" property="jboss.tools.exists"/>
    <available file="${ws-core.dest.file}" property="ws-core.tools.exists"/>
  </target>


  <target name="ivy:clean" description="Clean">
    <ivy:settings file="${global.ivy.settings.file}" />

    <ivy:cleancache />
    <ant inheritAll="false"
         inheritRefs="false"
         antfile="bda-ivy-build.xml"
         dir="${bda-download.dir}"
         target="ivy-cleancache">
      <property name="bda-utils.dir" value="${bda-utils.dir}"/>
      <property name="lib.dir" value="${lib.dir}"/>
    </ant>

  </target>

  <target name="validate:pre:build">
     <!--
    <delete dir="${application.base.path}/${wscore.relative.dir}"/>
    -->
    <validate-pre-build
      />

    <!-- i dont understand what is going on with globus... this may have something to do
         with tweaking the target dependencies for ahp3.  for now just force this unzip so build will
         work without globus_location being set

         validate-pre-build is already trying to do this.... this code is a suck -->
    <if>
      <not>
        <isset property="env.GLOBUS_LOCATION"/>
      </not>
      <then>
        <unzip dest="${target.dir}" src="${download.dir}/${wscore.file.name}"/>
        <property name="env.GLOBUS_LOCATION" value="${target.dir}/${ws-core.binaries.relative.dir}"/>
        <echo message="Setting GLOBUS_LOCATION to ${env.GLOBUS_LOCATION}."/>
      </then>

    </if>

  </target>

  <!-- Wrapper build target, call appropriate builds for sub-projects -->
  <target name="build:all" description="Builds all the sub projects, putting artifacts in the project level target directory, used by distribution targets to make distributions"
    depends="
    validate:pre:build,
    clean,
    init,
    compute-tag-properties,
    keygen,
    build:nbia-web,
    build:nbia-ctp,
    build:ncia-core-grid,
    build:nbia-grid,
    build:nbia-download-manager,
    build:nbia-liquibase,
    static-analysis:simian
          "/>

  <target name="build:nbia-remote-search" depends="init,
                                                   build:ncia-core-grid,
                                                   build:nbia-download-manager">
    <ant inheritAll="false"
         inheritRefs="false"
         antfile="build.xml"
         target="run"
         dir="${nbia-remote-search.base.dir}"/>
  </target>

  <target name="build:nbia-domain" depends="init">
    <ant inheritAll="false"
         inheritRefs="false"
         antfile="${nbia.build.file}"
         target="${nbia-domain.build.target}"
         dir="${nbia-domain.base.dir}">
      <property name="project.name" value="${project.name}"/>
    </ant>
  </target>

  <target name="build:nbia-util" depends="init">
    <ant inheritAll="false"
         inheritRefs="false"
         antfile="${nbia.build.file}"
         target="run"
         dir="../nbia-util">
      <property name="project.name" value="${project.name}"/>
    </ant>
  </target>


  <target name="build:nbia-services-grid" depends="init">
    <ant inheritAll="false" inheritRefs="false" antfile="${nbia.build.file}"
      target="${nbia-services-grid.build.target}"
      dir="${nbia-services-grid.base.dir}">
      <property name="project.name" value="${project.name}"/>
    </ant>
  </target>

  <target name="build:nbia-dao" depends="init,
                                         build:nbia-util,
                                         build:nbia-services-grid,
                                         build:nbia-domain">
    <ant inheritAll="false"
         inheritRefs="false"
         antfile="${nbia.build.file}"
         target="${nbia-dao.build.target}"
         dir="${nbia-dao.base.dir}">
      <property name="project.name" value="${project.name}"/>

      <property name="database.type" value="${database.type}"/>
      <property name="database.user" value="${database.user}"/>
      <property name="database.password" value="${database.password}"/>
      <property name="database.system.user" value="${database.system.user}"/>
      <property name="database.system.password" value="${database.system.password}"/>
      <property name="database.url" value="${database.url}"/>
      <property name="database.dialect" value="${database.dialect}"/>
      <property name="database.driver" value="${database.driver}"/>
    </ant>
  </target>


  <target name="build:nbia-services-commons" depends="init,
                                                      build:nbia-util,
                                                      build:nbia-services-grid,
                                                      build:nbia-dao">
    <ant inheritAll="false"
         inheritRefs="false"
         antfile="${nbia.build.file}"
         target="${nbia-services-commons.build.target}"
         dir="${nbia-services-commons.base.dir}">
      <property name="project.name" value="${project.name}"/>

      <property name="database.type" value="${database.type}"/>
      <property name="database.user" value="${database.user}"/>
      <property name="database.password" value="${database.password}"/>
      <property name="database.system.user" value="${database.system.user}"/>
      <property name="database.system.password" value="${database.system.password}"/>
      <property name="database.url" value="${database.url}"/>
      <property name="database.dialect" value="${database.dialect}"/>
      <property name="database.driver" value="${database.driver}"/>
    </ant>
  </target>


  <target name="build:nbia-liquibase" depends="init">
    <ant inheritAll="false"
         inheritRefs="false"
         antfile="${nbia.build.file}"
         target="run"
         dir="../nbia-liquibase">
      <property name="project.name" value="${project.name}"/>
    </ant>
  </target>

  <target name="build:nbia-download"
          depends="init,
                   build:nbia-dao">
    <ant inheritAll="false"
         inheritRefs="false"
         antfile="${nbia.build.file}"
         target="${nbia-download.build.target}"
         dir="${nbia-download.base.dir}">
      <property name="project.name" value="${project.name}"/>
    </ant>
  </target>

  <target name="build:nbia-download-manager"
          depends="init,
                   build:nbia-services-commons">
    <ant inheritAll="false"
         inheritRefs="false"
         antfile="${nbia.build.file}"
         target="${nbia-download-manager.build.target}"
         dir="${nbia-download-manager.base.dir}">
      <property name="project.name" value="${project.name}"/>

      <property name="jar-signing.keystore.location" value="${jar-signing.keystore.location}"/>
      <property name="jar-signing.keystore.password" value="${jar-signing.keystore.password}"/>
      <property name="jar-signing.keystore.alias" value="${jar-signing.keystore.alias}"/>
      <property name="jar-signing.execution.time" value="${jar-signing.execution.time}"/>
      <!-- Need absolution location, relative path would fail in sub-project since file would not exist -->
      <property name="jar-signing.keystore.abs-location" value="${jar-signing.keystore.abs-location}"/>
    </ant>

  </target>

  <!-- dont call this directly.  let the ear builder call it to ensure remote search is ready -->
  <target name="-build:imagezipping-mdb"
          depends="init,
                   build:nbia-services-commons">
    <ant inheritAll="false"
         inheritRefs="false"
         antfile="build.xml"
         target="run"
         dir="${image-zipping-mdb.base.dir}">
      <property name="project.name" value="${project.name}"/>
    </ant>

  </target>

  <target name="keygen">
    <generate-jar-signing-keystore/>
  </target>

  <!-- dont call this directly.  let the ear builder call it to ensure remote search is ready -->
  <target name="-build:image-deletion-mdb"
          depends="init,
                   build:nbia-services-commons">
    <ant inheritAll="false"
         inheritRefs="false"
         antfile="build.xml"
         target="run"
         dir="${image-deletion-mdb.base.dir}">
      <property name="project.name" value="${project.name}"/>
    </ant>

  </target>


  <target name="build:nbia-web"
          depends="init,
                   build:nbia-services-commons,
                   build:nbia-download-manager,
                   build:nbia-download,
                   build:nbia-remote-search,
                   -build:image-deletion-mdb,
                   -build:imagezipping-mdb">

    <!-- crud.  dealing with cyclical dependencies between nbia-download-mgr and nbia-remote-search -->
    <!-- nimpy - this sucks sucks sucks -->
    <copy todir="${target.dir}/dist/exploded/nbia-download-manager">
      <fileset dir="${lib.dir}/nbia-remote-search/runtime">
        <include name="*.jar" />
      </fileset>
    </copy>
    <copy todir="${target.dir}/dist/exploded/nbia-download-manager">
      <fileset dir="${lib.dir}/nbia-download-manager/runtime">
        <include name="*.jar" />
      </fileset>
    </copy>
    <copy todir="${target.dir}/dist/exploded/nbia-download-manager">
      <fileset dir="${target.dir}/dist/exploded/nbia-remote-search">
        <include name="*.jar"/>
      </fileset>
    </copy>

    <echoproperties prefix="jar-signing"/>
    <if>
      <equals arg1="${jar-signing.execution.time}" arg2="build"/>
      <then>
        <unsignjar jar="${target.dir}/dist/exploded/nbia-download-manager/bouncycastle-jdk1.3_1.25.jar"/>
        <echo message="jar-signing.execution.time set to build, signing jars"/>

        <comma-separated-file-list directory.to.list="${target.dir}/dist/exploded/nbia-download-manager"
                                   property.name.to.set="jar-signing.jar.list"/>

        <sign-jars jars.dir="${target.dir}/dist/exploded/nbia-download-manager"/>
      </then>
      <else>
        <echo message="jar-signing.execution.time not set to build, not signing jars"/>
      </else>
    </if>

    <ant inheritAll="false" inheritRefs="false" antfile="${nbia.build.file}"
      target="${nbia-web.build.target}"
      dir="${nbia-web.base.dir}">
      <property name="project.name" value="${project.name}"/>
      <property name="nbia.version" value="${nbia.version}"/>
      <property name="nbia_prod_build_tag.final" value="${nbia_prod_build_tag.final}"/>
    </ant>

  </target>


  <target name="build:nbia-ctp" depends="init,
                                         build:nbia-util,
                                         build:nbia-domain,
                                         compute-tag-properties">

    <!-- so we don't modify ncia-ctp directory and leave little pieces of poo that can be committed later by unsuspecting or uncaring people -->
    <mkdir dir="../nbia-ctp-working"/>
    <copy todir="../nbia-ctp-working">
      <fileset dir="../nbia-ctp"/>
    </copy>


    <ant inheritAll="false"
         inheritRefs="false"
         antfile="${nbia.build.file}"
         target="${nbia-ctp.build.target}"
         dir="${nbia-ctp.base.dir}">
      <property name="project.name" value="${project.name}"/>
      <property name="nbia.version" value="${nbia.version}"/>
      <property name="nbia_prod_build_tag.final" value="${nbia_prod_build_tag.final}"/>

      <property name="database.user" value="${database.user}"/>
      <property name="database.password" value="${database.password}"/>
      <property name="database.system.user" value="${database.system.user}"/>
      <property name="database.system.password" value="${database.system.password}"/>
      <property name="database.url" value="${database.url}"/>
      <property name="database.driver" value="${database.driver}"/>
      <property name="database.dialect" value="${database.dialect}"/>
      <property name="database.type" value="${database.type}"/>

    </ant>

    <mkdir dir="${nbia-ctp.dist.dir}"/>
    <copy todir="${nbia-ctp.dist.dir}">
      <fileset dir="${nbia-ctp.artifact.dir}">
        <include name="CTP-installer.jar"/>
      </fileset>
    </copy>

    <copy todir="${nbia-ctp.dist.dir}/FileSender">
      <fileset dir="${nbia-ctp.base.dir}/FileSender"/>
    </copy>

    <delete dir="../nbia-ctp-working"/>
  </target>


  <!-- Build ncia-core-grid sub-project produces project level artifacts -->
  <target name="build:ncia-core-grid" depends="init,
                                               build:nbia-services-commons">

    <delete dir="${ncia-core-grid.base.dir}/build"/>
    <delete dir="${ncia-core-grid.base.dir}/target"/>
    <delete dir="${lib.dir}/ncia-core-grid-transfer"/>

    <ant inheritAll="false"
         inheritRefs="false"
         antfile="${nbia.build.file}"
         target="deployJBoss"
         dir="${ncia-core-grid.base.dir}">
      <property name="project.name" value="${project.name}"/>
      <property name="env.GLOBUS_LOCATION" value="${env.GLOBUS_LOCATION}"/>
      <property name="env.JBOSS_HOME" value="${ncia-core-grid.artifact.dir}"/>
    </ant>

    <!--
      this is necessary to get cagrid patched versions of wsrf core
      see: http://www.cagrid.org/display/knowledgebase/Manually+Configure+JBoss+Container
      -->
    <ant inheritAll="false"
         inheritRefs="false"
         antfile="jboss.xml"
         target="deployJBoss"
         dir="${nbia-resource.artifact.dir}/grid/jboss">
      <property name="env.GLOBUS_LOCATION" value="${env.GLOBUS_LOCATION}"/>
      <property name="env.JBOSS_HOME" value="${ncia-core-grid.artifact.dir}"/>
      <property name="jboss.dir" value="${ncia-core-grid.artifact.dir}"/>

      <!-- webapp23.dtd craps out occasionally.  this is for local xmlcatalog -->
      <property name="dtd.dir" value="${nbia-resource.artifact.dir}/grid/jboss"/>
    </ant>


    <delete>
      <fileset dir="${ncia-core-grid.artifact.dir}/server/default/deploy/wsrf.war/WEB-INF/lib">
        <include name="*tests.jar" />
      </fileset>
    </delete>

    <zip update="false"
         destfile="${ncia-core-grid.dist.dir}/${ncia-core-grid.artifact.file}">
      <zipfileset dir="${ncia-core-grid.artifact.dir}/server/default/deploy/wsrf.war/"/>
    </zip>


    <ant inheritAll="false"
         inheritRefs="false"
         antfile="${nbia.build.file}"
         target="test"
         dir="${ncia-core-grid.base.dir}">
      <property name="project.name" value="${project.name}"/>
      <property name="env.GLOBUS_LOCATION" value="${env.GLOBUS_LOCATION}"/>
      <property name="env.JBOSS_HOME" value="${ncia-core-grid.artifact.dir}"/>

      <property name="database.type" value="${database.type}"/>
      <property name="database.user" value="${database.user}"/>
      <property name="database.password" value="${database.password}"/>
      <property name="database.system.user" value="${database.system.user}"/>
      <property name="database.system.password" value="${database.system.password}"/>
      <property name="database.url" value="${database.url}"/>
      <property name="database.dialect" value="${database.dialect}"/>
      <property name="database.driver" value="${database.driver}"/>
    </ant>


    <ant inheritAll="false"
         inheritRefs="false"
         antfile="${nbia.build.file}"
         target="inspect"
         dir="${ncia-core-grid.base.dir}">
      <property name="project.name" value="${project.name}"/>
      <property name="env.GLOBUS_LOCATION" value="${env.GLOBUS_LOCATION}"/>
      <property name="env.JBOSS_HOME" value="${ncia-core-grid.artifact.dir}"/>
    </ant>

  </target>

  <target name="build:nbia-grid" depends="init">

    <delete dir="${nbia-grid.base.dir}/build"/>
    <delete dir="${nbia-grid.base.dir}/target"/>
    <delete dir="${lib.dir}/nbia-service"/>

    <ant inheritAll="false"
         inheritRefs="false"
         antfile="${nbia.build.file}"
         target="deployJBoss"
         dir="${nbia-grid.base.dir}">
      <property name="project.name" value="${project.name}"/>
      <property name="env.GLOBUS_LOCATION" value="${env.GLOBUS_LOCATION}"/>
      <property name="env.JBOSS_HOME" value="${nbia-grid.artifact.dir}"/>
    </ant>

    <!--
      this is necessary to get cagrid patched versions of wsrf core
      see: http://www.cagrid.org/display/knowledgebase/Manually+Configure+JBoss+Container
      -->
    <ant inheritAll="false"
         inheritRefs="false"
         antfile="jboss.xml"
         target="deployJBoss"
         dir="${nbia-resource.artifact.dir}/grid/jboss">
      <property name="env.GLOBUS_LOCATION" value="${env.GLOBUS_LOCATION}"/>
      <property name="env.JBOSS_HOME" value="${nbia-grid.artifact.dir}"/>
      <property name="jboss.dir" value="${nbia-grid.artifact.dir}"/>

      <!-- webapp23.dtd craps out occasionally.  this is for local xmlcatalog -->
      <property name="dtd.dir" value="${nbia-resource.artifact.dir}/grid/jboss"/>
    </ant>

    <delete>
      <fileset dir="${nbia-grid.artifact.dir}/server/default/deploy/wsrf.war/WEB-INF/lib">
        <include name="*tests.jar" />
      </fileset>
    </delete>

    <zip update="false"
         destfile="${nbia-grid.dist.dir}/${nbia-grid.artifact.file}">
      <zipfileset dir="${nbia-grid.artifact.dir}/server/default/deploy/wsrf.war/"/>
    </zip>

    <!--
    <ant inheritAll="false"
         inheritRefs="false"
         antfile="${ncia.build.file}"
         target="test"
         dir="${nbia-grid.base.dir}">
      <property name="project.name" value="${project.name}"/>
      <property name="env.GLOBUS_LOCATION" value="${env.GLOBUS_LOCATION}"/>
      <property name="env.JBOSS_HOME" value="${nbia-grid.artifact.dir}"/>

      <property name="database.type" value="${database.type}"/>
      <property name="database.user" value="${database.user}"/>
      <property name="database.password" value="${database.password}"/>
      <property name="database.url" value="${database.url}"/>
      <property name="database.dialect" value="${database.dialect}"/>
      <property name="database.driver" value="${database.driver}"/>
    </ant>


    <ant inheritAll="false"
         inheritRefs="false"
         antfile="${ncia.build.file}"
         target="inspect"
         dir="${ncia-core-grid.base.dir}">
      <property name="project.name" value="${project.name}"/>
      <property name="env.GLOBUS_LOCATION" value="${env.GLOBUS_LOCATION}"/>
      <property name="env.JBOSS_HOME" value="${nbia-grid.artifact.dir}"/>
    </ant>
    -->
  </target>

  <target name="dist:gui-installer" description="Makes Gui-Installer distribution">
    <delete>
      <fileset dir="${dist.dir}">
        <include name="*.jar"/>
      </fileset>
    </delete>

    <gui-installer-prep/>

    <ant inheritAll="false" inheritRefs="false"
      antfile="install.xml"
      target="build:installer"
      dir="${build.dir}/gui-installer"
      >
      <property name="compile.jar.dir" value="${target.dir}/izpack-4.3"/>
    </ant>
  </target>

  <target name="dist:ncia-core-grid-client">

    <copy file="${ncia-core-grid.base.dir}/client-jars-nodeps.zip"
          todir="${dist.dir}"/>
    <copy file="${ncia-core-grid.base.dir}/client-jars-full.zip"
          todir="${dist.dir}"/>
  </target>

  <!-- Produces all distributions: installer, upgrader and source -->
  <target name="dist" description="Makes all distributions: installer, upgrader and source"
    depends="
    build:all,
    dist:installer,
    dist:upgrader,
    dist:src,
    dist:gui-installer,
    dist:ncia-core-grid-client"/>

  <target name="dist:src">
    <!-- Add tasks here to zip up src into a distribution, may require some additoinal properties for distribution name" -->
  </target>

  <target name="dist:tools:retrieve:jboss-bindings"  description="Downloads JBOSS bindings filefrom binary repository and verifies checksum">
    <get src="${jboss-bindings.src.url}" dest="${dist.exploded.dir}/${jboss-bindings.file}" />
  </target>

  <target name="dist:tools:retrieve:jbosscp"
          unless="jbosscp.tools.exists"
          description="Downloads JBOSS Cumulative Patch from binary repository and verifies checksum">
    <get src="${jbosscp.src.url}" dest="${jbosscp.dest.file}" />
  </target>

  <target name="dist:tools:retrieve:sync-gts">
    <if>
      <not>
        <available file="${download.dir}/${sync-gts.binaries.file}"/>
      </not>
      <then>
        <get src="${sync-gts.src.url}"
             dest="${download.dir}/${sync-gts.binaries.file}" />
      </then>
    </if>
    <property name="sync-gts.dist.dir"
              location="${dist.exploded.dir}/${sync-gts.dist.relative.dir}"/>
    <unzip src="${download.dir}/${sync-gts.binaries.file}"
           dest="${sync-gts.dist.dir}"/>

    <property name="cagrid.target.co.dir" location="${target.dir}/cagrid-target"/>
    <mkdir dir="${cagrid.target.co.dir}"/>
    <if>
      <not>
        <available file="${cagrid-target.src.url}"/>
      </not>
      <then>
        <mkdir dir="${cagrid.target.co.dir}"/>
        <svn-co svn.checkout.url="${cagrid-target.src.url}"
                svn.checkout.dir="${cagrid.target.co.dir}"
                delete="false"/>
      </then>
    </if>
    <copy todir="${sync-gts.dist.dir}/cagrid-target">
      <fileset dir="${cagrid.target.co.dir}"/>
    </copy>
  </target>

  <!-- Wrapper target that downloads all required binaries from Common Tools Repository -->
  <target name="dist:tools:retrieve" description="Downloads binary support tools form common tools repository"
    depends="
    init,
    dist:tools:retrieve:jboss,
    dist:tools:retrieve:jbosscp,
    dist:tools:retrieve:jai,
    dist:tools:retrieve:ws-core,
    dist:tools:retrieve:jboss-bindings,
    dist:tools:retrieve:sync-gts"
    />


  <target name="dist:tools:retrieve:ws-core" unless="ws-core.tools.exists">
    <get src="${ws-core.src.url}"
      dest="${ws-core.dest.file}"/>
    <get src="${ws-core.src.url}.MD5"
      dest="${ws-core.dest.file}.MD5"/>
    <checksum file="${ws-core.dest.file}" verifyProperty="ws-core.cksum.ok"/>
    <if>
      <equals arg1="${ws-core.cksum.ok}" arg2="true"/>
      <then>
        <echo message="Downloaded ws-core sucessfully"/>
      </then>
      <else>
        <fail message="Failed to download ws-core file sucessfully."/>
      </else>
    </if>
  </target>


  <target name="dist:tools:retrieve:jai">
    <get src="${jai.linux.src.url}"
      dest="${jai.linux.dest.file}"/>
    <get src="${jai.windows.src.url}"
      dest="${jai.windows.dest.file}"/>
  </target>


  <!-- Downloads jboss from tools repository and compares checksum, based on properties set in project.properties -->
  <target name="dist:tools:retrieve:jboss" unless="jboss.tools.exists">
    <get src="${jboss.src.url}"
         dest="${jboss.dest.file}"/>
    <get src="${jboss.src.url}.MD5"
         dest="${jboss.dest.file}.MD5"/>
    <checksum file="${jboss.dest.file}" verifyProperty="jboss.cksum.ok"/>
    <if>
      <equals arg1="${jboss.cksum.ok}" arg2="true"/>
      <then>
        <echo message="Downloaded jboss sucessfully"/>
      </then>
      <else>
        <fail message="Failed to download jboss file sucessfully."/>
      </else>
    </if>
  </target>

  <!-- Copies install time resources into distribution tree -->
  <target name="dist:installer:prep" depends="dist:tools:retrieve">
    <!-- Copy db-install and db-upgrade scripts from source into distribution area. The db files need to be under db-[install/upgard]/${database.type}. -->
    <copy todir="${db-install.dist.dir}" overwrite="true">
      <fileset dir="${db-install.src.dir}">
        <include name="**/*" />
      </fileset>
    </copy>
    <copy todir="${db-upgrade.dist.dir}" overwrite="true">
      <fileset dir="${db-upgrade.src.dir}">
        <include name="**/*" />
      </fileset>
    </copy>

    <dist-prep />
    <copy todir="${dist.exploded.dir}" overwrite="true">
      <fileset dir=".">
        <include name="ctp.xml" />
        <include name="ctp-macrodefs.xml" />
        <include name="jboss.xml" />
        <include name="ncia-core-grid.xml" />
        <include name="ncia-core-grid-unsecured.xml"/>
        <include name="nbia-grid.xml"/>
        <include name="database.xml" />
        <include name="macrodefs.xml" />
      </fileset>
    </copy>


    <if>
      <not>
        <isset property="exclude.ncia-core-grid"/>
      </not>
      <then>
        <copy todir="${dist.exploded.dir}/ncia-core-grid-transfer" overwrite="true">
          <fileset dir="${software.dir}/ncia-core-grid-transfer/conf">
            <include name="**/*"/>
          </fileset>
        </copy>
      </then>
    </if>
    <if>
      <not>
        <isset property="exclude.nbia-grid"/>
      </not>
      <then>
        <copy todir="${dist.exploded.dir}/nbia-service" overwrite="true">
          <!-- yea copy it from here, same thing -->
          <fileset dir="${software.dir}/ncia-core-grid-transfer/conf">
            <include name="**/*"/>
          </fileset>
        </copy>
      </then>
    </if>

  </target>

  <!-- Creates the installer distribution used by automated or manual remote installations -->
  <target name="dist:installer" depends="dist:installer:prep">
    <delete file="${dist.dir}/${nbia.install.zip.file}"/>
    <!-- Set environment name to external -->
    <replaceregexp file="${dist.exploded.dir}/build.xml" byline="true" match="(&lt;property name=&quot;env.name&quot; value=&quot;)\w+(&quot;/&gt;)" replace="\1external\2" />

    <obfuscate-properties-file
      properties.file="${dist.exploded.dir}/install.properties"
      required.property.list="application.base.path.linux,application.base.path.windows,database.system.user,database.system.password,database.server,database.port,database.name,database.user,database.password,mail.smtp.host,jboss.server.hostname,jar-signing.generate-selfsigned,jar-signing.keystore.alias,jar-signing.keystore.password,jar-signing.keystore.location,local.grid.uri"
      optional.property.list="ldap.url,ldap.basedn"
      />
    <replaceregexp file="${dist.exploded.dir}/install.properties" byline="true"
      match="^(grid.index.url)=.*"
      replace="\1=http://cagrid-index.nci.nih.gov:8080/wsrf/services/DefaultIndexService"
      />

    <zip destfile="${dist.dir}/${nbia.install.zip.file}"
         basedir="${dist.exploded.dir}"
         excludes="nbia-ear/nbia.war, nbia-services-commons/**,/nbia-domain/*,nbia-download/*,nbia-download-manager/*"/>
  </target>

  <!-- Copies install time resources into distribution tree -->
  <target name="dist:upgrader:prep" depends="dist:tools:retrieve">
    <!-- Copy db-upgrade scripts from source into distribution area. The db files need to be under db-upgrade/${database.type}. -->
    <copy todir="${db-upgrade.dist.dir}" overwrite="true">
      <fileset dir="${db-upgrade.src.dir}">
        <include name="**/*" />
      </fileset>
    </copy>


    <dist-prep default.target="upgrade"/>
    <copy todir="${dist.exploded.dir}" overwrite="true">
      <fileset dir=".">
        <include name="ctp.xml" />
        <include name="ctp-macrodefs.xml" />
        <include name="jboss.xml" />
        <include name="ncia-core-grid.xml"/>
        <include name="ncia-core-grid-unsecured.xml"/>
        <include name="nbia-grid.xml"/>
        <include name="database.xml" />
        <include name="macrodefs.xml" />
      </fileset>
    </copy>

    <copy todir="${dist.exploded.dir}/ncia-core-grid-transfer" overwrite="true">
      <fileset dir="${software.dir}/ncia-core-grid-transfer/conf">
        <include name="**/*"/>
      </fileset>
    </copy>
    <copy todir="${dist.exploded.dir}/nbia-service" overwrite="true">
      <!-- yea copy it from here, same thing -->
      <fileset dir="${software.dir}/ncia-core-grid-transfer/conf">
        <include name="**/*"/>
      </fileset>
    </copy>


  </target>

  <!-- Creates upgrader distribution -->
  <target name="dist:upgrader" depends="build:all, dist:upgrader:prep">
    <delete file="${dist.dir}/${nbia.upgrade.zip.file}"/>

    <!-- Set environment name to external -->
    <copy todir="${dist.exploded.dir}" overwrite="true">
      <fileset dir="${build.dir}">
        <include name="upgrade.properties" />
      </fileset>
    </copy>

    <delete file="${dist.exploded.dir}/install.properties"/>
    <replaceregexp file="${dist.exploded.dir}/upgrade.properties"
                   byline="true"
                   match="^(env.name)=.*"
                   replace="\1=external" />

<!--
from uncomment:
should be defined staticaly
jboss.home,ctp.server.home,ctp.client.home,
-->
    <obfuscate-properties-file
                        properties.file="${dist.exploded.dir}/upgrade.properties"
                        comment.property.list="application.base.path.windows,application.base.path.linux,jboss.relative.path"
                        uncomment.property.list="application.base.path,jboss.server.name,jboss.web.user,jboss.web.password"
                        required.property.list="application.base.path,jboss.server.name,ncia-core-grid.jboss.server.name,local.grid.uri"
                        optional.property.list="jboss.web.user,jboss.web.password"
                        delete.property.list=""
                        />

    <replaceregexp file="${dist.exploded.dir}/build.xml"
                   byline="true"
                   match="(&lt;property name=&quot;properties.file&quot;\s+value=&quot;).*(&quot;\s*\/&gt;)"
                   replace="\1upgrade.properties\2" />
    <zip destfile="${dist.dir}/${nbia.upgrade.zip.file}"
         basedir="${dist.exploded.dir}"
         excludes="nbia-ear/nbia.war, nbia-services-commons/**,/nbia-domain/*,nbia-download/*,nbia-download-manager/*"/>

  </target>


  <target name="deploy:local:install:database"
          depends="dist:installer:prep"
          description="Installs the application and required binaries on the local machine, used for developer desktops and ci environments" >
    <deploy-local
      target.name="install:database"
      />
  </target>

  <!-- Installs the application locally. Requires a local instance of mysql. Will use the target from install.xml specified in ${install.target} (defaults to install unless passed in on command line).  Calls ant from exec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install. This target will use differnt properties based on linux (linux-install.properties) or windows (windows-install.properties) installs. It only supports using those properties files for now, so if you want to change install time properites edit these files. -->
  <target name="deploy:local:install"
          depends="dist:installer:prep"
          description="Installs the application and required binaries on the local machine, used for developer desktops and ci environments" >
    <deploy-local
      target.name="${install.target}"
      />
  </target>


  <!-- Upgrades the application locally. Requires a local instance of mysql. Will use the target from install.xml specified in ${upgrade.target} (defaults to upgrade unless passed in on command line).  Calls ant from exec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install. This target will use differnt properties based on linux (linux-install.properties) or windows (windows-install.properties) upgrades. It only supports using those properties files for now, so if you want to change install time properites edit these files. -->
  <target name="deploy:local:upgrade"
          depends="dist:upgrader:prep"
          description="Upgrades the application on the local machine, used for developer desktops and ci environments" >
    <deploy-local
      target.name="${upgrade.target}"
      properties.file="upgrade.properties"
      />
  </target>

  <!-- Begin: AHP3 upgrade targets for tiers -->
  <target name="deploy:remote:upgrade:ahp"
          description="Installs and configures the application and required binaries and re-creates the datbase  on a remote machine. Used for NCI tiers (dev, qa, stg, prod)"
          depends="deploy:remote:jboss:upgrade:ahp,
                   deploy:remote:db:upgrade:ahp,
                   deploy:remote:ncia-core-grid:upgrade:ahp,
                   deploy:remote:ncia-core-grid-unsecured:upgrade:ahp,
                   deploy:remote:nbia-grid:upgrade:ahp,
                   deploy:remote:ctp:upgrade:ahp"/>

  <target name="deploy:remote:jboss:upgrade:ahp">
    <deploy-files dist.file="${nbia.upgrade.zip.file}" />
    <override-properties-prep override.properties="${override.properties}"
                              override.properties.string.property.name="override.properties.string"/>
    <remote-ssh remotesshcommand=". .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${override.properties.string} ${upgrade.jboss.target}" />
  </target>

  <target name="deploy:remote:db:upgrade:ahp">

    <deploy-files ssh.user="${db.ssh.server.username}"
                  ssh.host="${db.ssh.server.hostname}"
                  remote.directory.property.name="db.ssh.dir.temp"
                  properties.file="${properties.file}"
                  dist.file="${nbia.upgrade.zip.file}"/>
    <override-properties-prep override.properties="${override.properties}"
                              override.properties.string.property.name="override.properties.string"/>
    <remote-ssh remotesshcommand=". .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${override.properties.string} upgrade:database" />
  </target>

  <target name="deploy:remote:ncia-core-grid:upgrade:ahp"
          unless="exclude.ncia-core-grid">

    <if>
      <not>
        <isset property="${debug.remote}"/>
      </not>
      <then>
        <property name="debug.remote.flag" value="-v"/>
      </then>
      <else>
        <property name="debug.remote.flag" value=""/>
      </else>
    </if>


    <deploy-files
      ssh.user="${tomcat.ssh.server.username}"
      ssh.host="${tomcat.ssh.server.hostname}"
      remote.directory.property.name="tomcat.ssh.dir.temp"
      properties.file="${properties.file}"
      dist.file="${nbia.upgrade.zip.file}"
      />
    <override-properties-prep override.properties="${override.properties}"
                              override.properties.string.property.name="override.properties.string"/>
    <remote-ssh remoteSshHost="${tomcat.ssh.server.hostname}"
                remotesshcommand=". .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${override.properties.string}  ${upgrade.ncia-core-grid.target}"
                remoteSshUser="${tomcat.ssh.server.username}"/>
  </target>

  <target name="deploy:remote:ncia-core-grid-unsecured:upgrade:ahp"
          unless="exclude.ncia-core-grid-unsecured">

    <if>
      <not>
        <isset property="${debug.remote}"/>
      </not>
      <then>
        <property name="debug.remote.flag" value="-v"/>
      </then>
      <else>
        <property name="debug.remote.flag" value=""/>
      </else>
    </if>
    <override-properties-prep override.properties="${override.properties}"
                              override.properties.string.property.name="override.properties.string"/>
    <remote-ssh remoteSshHost="${tomcat.ssh.server.hostname}"
                remotesshcommand=". .bash_profile;cd ${tomcat.ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${debug.remote.flag} ${override.properties.string} ${upgrade.ncia-core-grid-unsecured.target}"
                remoteSshUser="${tomcat.ssh.server.username}"/>
  </target>

  <target name="deploy:remote:nbia-grid:upgrade:ahp"
          unless="exclude.nbia-grid">

    <if>
      <not>
        <isset property="${debug.remote}"/>
      </not>
      <then>
        <property name="debug.remote.flag" value="-v"/>
      </then>
      <else>
        <property name="debug.remote.flag" value=""/>
      </else>
    </if>
    <override-properties-prep override.properties="${override.properties}"
                              override.properties.string.property.name="override.properties.string"/>
    <remote-ssh remoteSshHost="${tomcat.ssh.server.hostname}"
                remotesshcommand=". .bash_profile;cd ${tomcat.ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${debug.remote.flag} ${override.properties.string} ${upgrade.nbia-grid.target}"
                remoteSshUser="${tomcat.ssh.server.username}"/>
  </target>

  <target name="deploy:remote:ctp:upgrade:ahp"
          unless="exclude.ctp">
    <if>
      <not>
        <isset property="ctp.remote.install"/>
      </not>
      <then>

        <deploy-files
          ssh.user="${ctp.ssh.server.username}"
          ssh.host="${ctp.ssh.server.hostname}"
          remote.directory.property.name="ctp.ssh.dir.temp"
          properties.file="${properties.file}"
          dist.file="${nbia.upgrade.zip.file}"
          />
        <override-properties-prep override.properties="${override.properties}"
                                  override.properties.string.property.name="override.properties.string"/>
        <remote-ssh remoteSshHost="${ctp.ssh.server.hostname}"
                    remotesshcommand=". .bash_profile;cd ${ctp.ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${override.properties.string} ${ctp.upgrade.target}"
                    remoteSshUser="${ctp.ssh.server.username}"/>
      </then>
    </if>
  </target>
  <!-- End: AHP3 upgrade targets for tiers -->




  <!-- Begin AHP3 fresh install for tiers -->
  <target name="deploy:remote:install:ahp"
       depends="deploy:remote:jboss:install:ahp,
                deploy:remote:ncia-core-grid:install:ahp,
                deploy:remote:ncia-core-grid-unsecured:install:ahp,
                deploy:remote:nbia-grid:install:ahp,
                deploy:remote:ctp:install:ahp">
  </target>

  <target name="deploy:remote:jboss:install:ahp">
    <deploy-files dist.file="${nbia.upgrade.zip.file}" />
    <override-properties-prep override.properties="${override.properties}"
                              override.properties.string.property.name="override.properties.string"/>
    <remote-ssh remotesshcommand=". .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${override.properties.string} ${install.jboss.target}" />

    <!-- leave out the db for install..... could make configurable, but avoid horror show -->
  </target>

  <target name="deploy:remote:ncia-core-grid:install:ahp"
          unless="exclude.ncia-core-grid">

   <if>
     <not>
       <isset property="${debug.remote}"/>
     </not>
     <then>
       <property name="debug.remote.flag" value="-v"/>
     </then>
     <else>
       <property name="debug.remote.flag" value=""/>
     </else>
   </if>

    <deploy-files
      ssh.user="${tomcat.ssh.server.username}"
      ssh.host="${tomcat.ssh.server.hostname}"
      remote.directory.property.name="tomcat.ssh.dir.temp"
      properties.file="${properties.file}"
      dist.file="${nbia.upgrade.zip.file}"
      />
    <override-properties-prep override.properties="${override.properties}"
                              override.properties.string.property.name="override.properties.string"/>
    <remote-ssh remoteSshHost="${tomcat.ssh.server.hostname}"
                remotesshcommand=". .bash_profile;cd ${tomcat.ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${debug.remote.flag} ${override.properties.string} ${install.ncia-core-grid.target}"
                remoteSshUser="${tomcat.ssh.server.username}"/>
  </target>

  <target name="deploy:remote:ncia-core-grid-unsecured:install:ahp"
          unless="exclude.ncia-core-grid-unsecured">

    <if>
      <not>
        <isset property="${debug.remote}"/>
      </not>
      <then>
        <property name="debug.remote.flag" value="-v"/>
      </then>
      <else>
        <property name="debug.remote.flag" value=""/>
      </else>
    </if>
    <override-properties-prep override.properties="${override.properties}"
                              override.properties.string.property.name="override.properties.string"/>

    <remote-ssh remoteSshHost="${tomcat.ssh.server.hostname}"
                remotesshcommand=". .bash_profile;cd ${tomcat.ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${debug.remote.flag} ${override.properties.string} ${install.ncia-core-grid-unsecured.target}"
                remoteSshUser="${tomcat.ssh.server.username}"/>
  </target>

  <target name="deploy:remote:nbia-grid:install:ahp"
          unless="exclude.ncia-core-grid-unsecured">

    <if>
      <not>
        <isset property="${debug.remote}"/>
      </not>
      <then>
        <property name="debug.remote.flag" value="-v"/>
      </then>
      <else>
        <property name="debug.remote.flag" value=""/>
      </else>
    </if>
    <override-properties-prep override.properties="${override.properties}"
                              override.properties.string.property.name="override.properties.string"/>

    <remote-ssh remoteSshHost="${tomcat.ssh.server.hostname}"
                remotesshcommand=". .bash_profile;cd ${tomcat.ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${debug.remote.flag} ${override.properties.string} ${install.nbia-grid.target}"
                remoteSshUser="${tomcat.ssh.server.username}"/>
  </target>

  <target name="deploy:remote:ctp:install:ahp"
          unless="exclude.ctp">
    <if>
      <not>
        <isset property="ctp.remote.install:ahp"/>
      </not>
      <then>

        <deploy-files
          ssh.user="${ctp.ssh.server.username}"
          ssh.host="${ctp.ssh.server.hostname}"
          remote.directory.property.name="ctp.ssh.dir.temp"
          properties.file="${properties.file}"
          dist.file="${nbia.upgrade.zip.file}"
          />
        <override-properties-prep override.properties="${override.properties}"
                                  override.properties.string.property.name="override.properties.string"/>
        <remote-ssh remoteSshHost="${ctp.ssh.server.hostname}"
                    remotesshcommand=". .bash_profile;cd ${ctp.ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true  ${override.properties.string} ${ctp.install.target}"
                    remoteSshUser="${ctp.ssh.server.username}"/>
      </then>
    </if>
  </target>
  <!-- End AHP3 fresh install for tiers -->

  <target name="usage" description="Explains how to use this build script">
    <echo message="To run a remote upgrade type: ant deploy:remote:upgrade -Dproperties.file=[path to environment proeprty file]" />
  </target>


  <target name="report:grand" description="Generates grand graphs for build.xml files">
    <mkdir dir="${grand.rpt.dir}"/>
    <report-grand
      build.file.location="build.xml"
      output.file.dir="${grand.rpt.dir}"
      output.file.name="nbia-root-build.xml"
      />

    <!-- this one is a little ornery.  The install.xml doesn't expect
         to be loaded/executed on its own until it is in the dist/target directory
         so you really have to run deploy:local:install or deploy:local:upgrade
         before trying to create this report -->
    <report-grand
      build.file.location="${dist.exploded.dir}/build.xml"
      output.file.dir="${grand.rpt.dir}"
      output.file.name="nbia-root-install.xml"
      />


    <report-grand
      build.file.location="${ncia-core-grid.base.dir}/build.xml"
      output.file.dir="${grand.rpt.dir}"
      output.file.name="ncia-core-grid-build.xml"
      />

    <report-grand
      build.file.location="${software.dir}/nbia-ctp/build.xml"
      output.file.dir="${grand.rpt.dir}"
      output.file.name="nbia-ctp-build.xml"
      />
    <report-grand
      build.file.location="${nbia-services-commons.base.dir}/build.xml"
      output.file.dir="${grand.rpt.dir}"
      output.file.name="nbia-services-commons-build.xml"
      />
    <report-grand
      build.file.location="${nbia-services-grid.base.dir}/build.xml"
      output.file.dir="${grand.rpt.dir}"
      output.file.name="nbia-services-grid-build.xml"
      />
    <report-grand
      build.file.location="${nbia-web.base.dir}/build.xml"
      output.file.dir="${grand.rpt.dir}"
      output.file.name="nbia-web-build.xml"
      />
  </target>


  <!-- this stuff is kinda sorta really install stuff - but putting in install.xml
       will make life difficult..... -->
  <target name="install:force-nciaprod">

    <xmltask source="${jboss.home}/server/${jboss.server.name}/deploy/nbia-ds.xml"
             dest="${jboss.home}/server/${jboss.server.name}/deploy/ncia-ds.xml">
      <!-- no xmlcatalog necessary -->
      <replace path="//:connection-url/text()"
               withtext="${socalled.acceptance.testing.db.connection.url}" />
      <replace path="//:user-name/text()"
               withtext="${socalled.acceptance.testing.db.username}" />
      <replace path="//:password/text()"
               withtext="${socalled.acceptance.testing.db.password}" />
     </xmltask>

    <xmltask source="${ncia-core-grid.jboss.home}/server/${ncia-core-grid.jboss.server.name}/deploy/wsrf.war/WEB-INF/etc/cagrid_NCIACoreService/jndi-config.xml"
             dest="${ncia-core-grid.jboss.home}/server/${ncia-core-grid.jboss.server.name}/deploy/wsrf.war/WEB-INF/etc/cagrid_NCIACoreService/jndi-config.xml">
      <!-- no xmlcatalog necessary -->
      <replace path="//:resource[@name='nciaDatabase']//:parameter[:name='jdbcUrl']/:value/text()"
               withtext="${socalled.acceptance.testing.db.connection.url}" />
      <replace path="//:resource[@name='nciaDatabase']//:parameter[:name='user']/:value/text()"
               withtext="${socalled.acceptance.testing.db.username}" />
      <replace path="//:resource[@name='nciaDatabase']//:parameter[:name='password']/:value/text()"
               withtext="${socalled.acceptance.testing.db.password}" />
     </xmltask>
  </target>

  <target name="test:selenium:init"
          depends="install:force-nciaprod">
    <copy file="${ncia-core-grid.base.dir}/../nbia-web/test/selenium/selenium-server-1.0-beta-2-hacked-for-ff3_6.jar"
          tofile="${ncia-core-grid.base.dir}/../target/lib/nbia-web/test-selenium/selenium-server-1.0-beta-2.jar"
          overwrite="true"/>

    <jboss-stop-jboss />
    <sleep seconds="15"/>

    <jboss-start-jboss />
    <sleep seconds="120" />

  </target>

  <target name="test:selenium"
          depends="test:selenium:init">
    <!-- no guest login -->
    <!-- replace from previous guest run -->
    <replaceregexp file="${jboss.home}/server/${jboss.server.name}/deploy/properties-service.xml"
                   match="enabled_guest_account=(.*)&lt;/attribute"
                   replace="enabled_guest_account=no&lt;/attribute"
                   byline="true"/>


    <ant antfile="${nbia.build.file}"
         target="test:selenium:noguest"
         inheritAll="false"
         inheritRefs="false"
         dir="${nbia-web.base.dir}">
      <property name="project.name" value="${project.name}"/>
      <property name="jboss.server.hostname" value="${jboss.server.hostname}"/>
      <property name="jboss.server.port" value="${jboss.server.port}"/>
    </ant>
    <jboss-stop-jboss />

    <!-- enable the guest for guest specific selenium tests -->

    <replaceregexp file="${jboss.home}/server/${jboss.server.name}/deploy/properties-service.xml"
                   match="enabled_guest_account=(.*)&lt;/attribute"
                   replace="enabled_guest_account=yes&lt;/attribute"
                   byline="true"/>
    <replaceregexp file="${jboss.home}/server/${jboss.server.name}/deploy/properties-service.xml"
                   match="guest_username=(.*)&lt;/attribute"
                   replace="guest_username=nciadevtest&lt;/attribute"
                   byline="true"/>

    <jboss-start-jboss />
    <sleep seconds="120" />

    <ant antfile="${nbia.build.file}"
         target="test:selenium:guest"
         inheritAll="false"
         inheritRefs="false"
         dir="${nbia-web.base.dir}">
      <property name="project.name" value="${project.name}"/>
      <property name="jboss.server.hostname" value="${jboss.server.hostname}"/>
      <property name="jboss.server.port" value="${jboss.server.port}"/>
    </ant>

  </target>

  <target name="test:ncia-core-grid-transfer"
          depends="install:force-nciaprod">

    <unzip dest="${temp.dir}/griddeps"
           src="${ncia-core-grid.base.dir}/client-jars-full.zip" />

    <!-- only necessary if running without doing build first -->
    <mkdir dir="${common.dir}/target/reports/"/>

    <jboss-stop-jboss />
    <jboss-stop-jboss jboss.home="${ncia-core-grid.jboss.home}"
                      jboss.server.hostname="${ncia-core-grid.jboss.server.hostname}"
                      jboss.server.jndi.port="${ncia-core-grid.jboss.server.jndi.port}"
                      jboss.server.name="${ncia-core-grid.jboss.server.name}"
                      jboss.web.user="${ncia-core-grid.jboss.web.user}"
                      jboss.web.password="${ncia-core-grid.jboss.web.password}"/>

    <sleep seconds="15"/>

    <!-- need to restart this because copying ds.xml over deploy will screw things up -->
    <jboss-start-jboss />
    <jboss-start-jboss jboss.home="${ncia-core-grid.jboss.home}"
                       jboss.server.name="${ncia-core-grid.jboss.server.name}"/>

    <sleep seconds="120" />

    <junit printsummary="on" maxmemory="256m" fork="on" dir="${ncia-core-grid.base.dir}">
      <sysproperty key="grid.service.url"
                   value="http://localhost:${ncia-core-grid.jboss.server.port}/wsrf/services/cagrid/NCIACoreService"/>

      <classpath>
        <fileset dir="${temp.dir}/griddeps">
          <include name="*.jar" />
        </fileset>
        <fileset dir="${lib.dir}/ncia-core-grid-transfer/test">
          <include name="*.jar" />
        </fileset>
      </classpath>

      <test name="gov.nih.nci.cagrid.ncia.client.NCIACoreServiceClientTestCaseFunctional"
            haltonfailure="no"
            todir="${reports.dir}"
            outfile="NCIACoreServiceClientTestCaseFunctional-report">
        <formatter type="xml"/>
      </test>

    </junit>

  </target>


  <target name="test:secure-grid"
          depends="install:force-nciaprod">

    <unzip dest="${temp.dir}/griddeps"
           src="${ncia-core-grid.base.dir}/client-jars-full.zip" />

    <!-- only necessary if running without doing build first -->
    <mkdir dir="${common.dir}/target/reports/"/>
        <jboss-stop-jboss />

        <echo>DONE stopping appserver</echo>

        <sleep seconds="15"/>
        <jboss-stop-jboss jboss.home="${ncia-core-grid.jboss.home}"
                      jboss.server.hostname="${ncia-core-grid.jboss.server.hostname}"
                      jboss.server.jndi.port="${ncia-core-grid.jboss.server.jndi.port}"
                      jboss.server.name="${ncia-core-grid.jboss.server.name}"
                      jboss.web.user="${ncia-core-grid.jboss.web.user}"
                      jboss.web.password="${ncia-core-grid.jboss.web.password}"/>


    <sleep seconds="15"/>

    <!-- need to restart this because copying ds.xml over deploy will screw things up -->
    <jboss-start-jboss />
    <jboss-start-jboss jboss.home="${ncia-core-grid.jboss.home}"
                       jboss.server.name="${ncia-core-grid.jboss.server.name}"/>

    <sleep seconds="120" />

    <junit printsummary="on" maxmemory="256m" fork="on" dir="${ncia-core-grid.base.dir}">
      <sysproperty key="grid.service.url"
                   value="https://localhost:${ncia-core-grid.jboss.grid.secure.port}/wsrf/services/cagrid/NCIACoreService"/>
      <sysproperty key="grid.user.name"
                   value="${grid.user.name}"/>
      <sysproperty key="grid.password"
                   value="${grid.password}"/>
      <sysproperty key="java.endorsed.dirs"
                   value="${ncia-core-grid.base.dir}/lib/secure/endorsed"/>
      <classpath>
        <fileset dir="${temp.dir}/griddeps">
          <include name="*.jar" />
        </fileset>
        <fileset dir="${lib.dir}/ncia-core-grid-transfer/test">
          <include name="*.jar" />
        </fileset>
      </classpath>

      <test name="gov.nih.nci.cagrid.ncia.client.PrivateQueriesWithCredTestCaseFunctional"
            haltonfailure="yes"
            todir="${reports.dir}"
            outfile="PrivateQueriesWithCredTestCaseFunctional-report">
        <formatter type="xml"/>
      </test>
      <test name="gov.nih.nci.cagrid.ncia.client.PrivateQueriesWithNoCredTestCaseFunctional"
            haltonfailure="no"
            todir="${reports.dir}"
            outfile="PrivateQueriesWithNoCredTestCaseFunctional-report">
        <formatter type="xml"/>
      </test>
      <test name="gov.nih.nci.cagrid.ncia.client.PrivateTransferWithCredTestCaseFunctional"
            haltonfailure="yes"
            todir="${reports.dir}"
            outfile="PrivateTransferWithCredTestCaseFunctional-report">
        <formatter type="xml"/>
      </test>

      <!--
      To use the https protocol to retrieve data from the Transfer Service you must have credentials
      <test name="gov.nih.nci.cagrid.ncia.client.PrivateTransferWithNoCredTestCaseFunctional"
            haltonfailure="yes"
            todir="${reports.dir}"
            outfile="PrivateTransferWithNoCredTestCaseFunctional-report">
        <formatter type="xml"/>
      </test>
      -->


    </junit>

  </target>


  <target name="report:erd">
    <generate-erd report.dir="${reports.dir}"
                  schemaspy.jar="schemaspy-4.1.1.jar"
                  database.driver.jar="mysql-connector-java-5.0.8.jar"/>
  </target>


  <import file="ctp-macrodefs.xml"/>

  <target name="dist:ctp-client"
          description="build and configure ctp client"
          depends="build:nbia-ctp" >
    <mkdir dir="${nbia-ctp.dist.dir}/CTP_Client"/>
    <mkdir dir="${nbia-ctp.dist.dir}/CTP_Client/CTP/logs" />
    <unjar src="${nbia-ctp.dist.dir}/CTP-installer.jar"
           dest="${nbia-ctp.dist.dir}/CTP_Client"/>
    <!-- copy common files to the client -->
    <copy todir="${nbia-ctp.dist.dir}/CTP_Client/CTP">
      <fileset dir="${common.dir}/resources/ctp/client">
        <include name="**/*"/>
      </fileset>
      <fileset dir="${common.dir}/resources/ctp">
        <include name="*.*"/>
      </fileset>
    </copy>


    <ctp-configure ctp.home="${nbia-ctp.dist.dir}/CTP_Client"
                   king.password="${ctp.client.king.password}"
                   admin.password="${ctp.client.admin.password}"
                   common.dir.src="${common.dir}"
                   ctp.resources.relative.dir="client"/>


    <ctp-client-configure ctp.client.home="${nbia-ctp.dist.dir}/CTP_Client"/>

    <create-ctp-client-startup-scripts ctp.client.home="${nbia-ctp.dist.dir}/CTP_Client"/>

    <delete dir="${nbia-ctp.dist.dir}/CTP_Client/org"/>
    <delete dir="${nbia-ctp.dist.dir}/CTP_Client/META-INF"/>

    <!-- copy and configure FileSender files -->
    <copy todir="${nbia-ctp.dist.dir}/CTP_Client/FileSender">
      <fileset dir="${nbia-ctp.dist.dir}/FileSender"/>
    </copy>

    <configure-filesender ctp.client.home="${nbia-ctp.dist.dir}/CTP_Client"/>

    <!-- zip up -->
    <zip update="false"
         destfile="${dist.dir}/CTP_Client.zip">
      <zipfileset dir="${nbia-ctp.dist.dir}/CTP_Client/"/>
    </zip>

    <delete dir="${nbia-ctp.dist.dir}/CTP_Client/"/>

</target>
</project>
