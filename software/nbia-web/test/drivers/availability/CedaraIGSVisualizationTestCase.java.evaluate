package gov.nih.nci.ncia.test.availability;

import junit.framework.TestCase;

import java.net.*;
import java.io.InputStream;

/**
 * A simple ISG sanity test to verify we have the production IGS running
 * 
 * @author David Bauer
 */
public class CedaraIGSVisualizationTestCase extends TestCase
{
    private URL context;
    private String series;
    private String instance;
    private String warrant;

    public void setUp() throws Exception
    {
        // ISG server endpoint URL
       //context = new URL(System.getProperty("context", "http://137.187.66.21:8080/"));
       context = new URL(System.getProperty("context", "http://hc-nciacedara-2.nci.nih.gov:8080/"));
        // User credentials required to access the NCIA Web Server
        warrant = System.getProperty("warrant", "usr=alice&sid=012345679abcdef");
        // A DICOM Series Instance UID available in the NCIA Web Server
        series = System.getProperty("series", "1.3.6.1.4.1.9328.50.1.1154");
        // A DICOM SOP Instance UID of the requested series
        instance = System.getProperty("instance", "1.3.6.1.4.1.9328.50.1.1153");
      }

    public void testCedaraIGS() throws Exception
    {
        // Request the ISG default path, a "fulleren" JPEG image is expected back
        HttpURLConnection query = (HttpURLConnection)context.openConnection();
        assertEquals("Endpoint.OK", HttpURLConnection.HTTP_OK, query.getResponseCode());
        assertEquals("Render.ContentType", "image/jpeg", query.getContentType());
        assertTrue("Endpoint.Icon", drainStream(query.getInputStream()) > 1024);

        // Request the ISG rendered imag; a JPEG compressed image fragment is expected back
        System.out.println(renderRequest());
        URL render = new URL(context, renderRequest());
        query = (HttpURLConnection)render.openConnection();
        System.out.println(query.getResponseCode());
        assertEquals("Render HTTP Request Status",HttpURLConnection.HTTP_OK,query.getResponseCode());
        if(HttpURLConnection.HTTP_OK == query.getResponseCode())
        {
            assertEquals("Render.ContentType", "image/jp2", query.getContentType());
            System.out.println("Content Length:" +query.getContentLength());
            assertEquals("Render.ContentBody", query.getContentLength(), drainStream(query.getInputStream()));
        }
      
    }

    /**
     * Builds an ISG render request URL path & query
     * @return  ISG render request URL path & query
     */
    private String renderRequest()
    {
        String []tokens = warrant.split("[&=]+");
        StringBuffer sb = new StringBuffer("render?.tk=").append("0f1f2f3f4f5f6f7f");
        for(int i = 0; i < tokens.length; i += 2)
        {
            sb.append('&').append(tokens[i]).append('=').append('~').append(tokens[i+1].trim());
        }
        sb.append("&sz=8192&of=0&qp=2d&id=").append(series).append("&si=").append(instance);
        return sb.toString();
    }

    /**
     * Drains the specified input stream.
     * @return  the number of drained bytes
     */
    private int drainStream(InputStream stm) throws Exception
    {
        for(int c = 0;;c++) if(stm.read() < 0) return c;
    }
 
}


