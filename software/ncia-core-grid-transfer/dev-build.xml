<?xml version="1.0"?>
<project name="Developer Modified Build File" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
  <!-- ============================================================== -->
  <!-- This file is designed to allow the developer to extend the     -->
  <!-- build process without having to edit the master build.xml      -->
  <!-- file. DO NOT REMOVE ANY TARGETS                                -->
  <!-- ============================================================== -->


  <!-- ============================================================== -->
  <!-- Place any other properties you will need here                  -->
  <!-- ============================================================== -->
  <property name="common.dir" value="${basedir}/../" />
  <property name="global.ivy.settings.file" location="${common.dir}/common/ivysettings.xml" />
  <property name="project.lib.dir" value="${common.dir}/target/lib/ncia-core-grid-transfer"/>

  <!-- a little dicey. the grid service MUST be buildable by itself to enable
       introduce to do its thing (add operations).  presume previous full build has already put ivy out there tho...  -->
  <taskdef resource="org/apache/ivy/ant/antlib.xml"
           uri="antlib:org.apache.ivy.ant">
    <classpath>
      <fileset dir="../target/lib">
        <include name="ivy-*.jar" />
      </fileset>
    </classpath>
  </taskdef>

  <taskdef resource="net/sf/antcontrib/antlib.xml">
    <classpath>
      <pathelement location="${tools.lib.dir}/ant-contrib.jar" />
    </classpath>
  </taskdef>
  <!--import developers targets and properties (which can be overridden)-->
  <import file="unittesting-integration.xml" />


  <!-- ============================================================== -->
  <!-- Create any extended Classpaths here                            -->
  <!-- ============================================================== -->
  <target name="defineExtendedClasspaths" depends="ivy-compile, ivy-runtime, ivy-test">
    <path id="base.extended.classpath">
      <fileset dir="${project.lib.dir}/compile">
        <include name="*.jar" />
      </fileset>
    </path>

    <path id="service.build.extended.classpath">

    </path>


    <path id="service.run.extended.classpath">
      <fileset dir="${project.lib.dir}/runtime">
        <include name="*.jar" />
      </fileset>
    </path>

    <path id="test.build.extended.classpath">
    </path>
    <path id="test.run.extended.classpath">
    </path>
    <path id="run.extended.classpath">

    </path>
    <path id="tasks.run.extended.classpath">
    </path>
  </target>


  <!-- ============================================================== -->
  <!-- Pre Init Target                                                -->
  <!-- ============================================================== -->
  <target name="preInit">

  </target>

  <!-- ============================================================== -->
  <!-- Post Init Build Target                                         -->
  <!-- ============================================================== -->
  <target name="postInit">

  </target>


  <!-- ============================================================== -->
  <!-- Pre Stubs Target                                               -->
  <!-- ============================================================== -->
  <target name="preStubs">

  </target>

  <!-- ============================================================== -->
  <!-- Post Stubs Build Target                                        -->
  <!-- ============================================================== -->
  <target name="postStubs">

  </target>

  <!-- ============================================================== -->
  <!-- Pre Compile Stubs Build Target                                 -->
  <!-- ============================================================== -->
  <target name="preCompileStubs">

  </target>

  <!-- ============================================================== -->
  <!-- Post Compile Stubs Build Target                                -->
  <!-- ============================================================== -->
  <target name="postCompileStubs">

  </target>

  <!-- ============================================================== -->
  <!-- Pre Jar Stubs Build Target                                     -->
  <!-- ============================================================== -->
  <target name="preJarStubs">

  </target>

  <!-- ============================================================== -->
  <!-- Post Jar Stubs Build Target                                    -->
  <!-- ============================================================== -->
  <target name="postJarStubs">

  </target>

  <!-- ============================================================== -->
  <!-- Pre Compile Build Target                                       -->
  <!-- ============================================================== -->

  <target name="ivy-settings">
    <ivy:settings file="${common.dir}/common/ivysettings-grid.xml" />
  </target>
  <target name="ivy-compile" depends="ivy-settings" unless="ivy.compile.run">
    <mkdir dir="${project.lib.dir}/compile"/>
    <ivy:resolve file="ivy.xml" conf="compile" />
    <ivy:retrieve conf="compile" pattern="${project.lib.dir}/[conf]/[artifact]-[revision].[ext]" />

    <move todir="${project.lib.dir}/compile">
      <fileset dir="${project.lib.dir}/compile">
        <include name="*-working@*.jar" />
      </fileset>
      <mapper type="regexp" from="^(.*)\-working\@(.*)\.jar$" to="\1.jar" />
    </move>
    <property name="ivy.compile.run" value="t"/>
  </target>
  <target name="preCompile" depends="ivy-compile">

  </target>

  <!-- ============================================================== -->
  <!-- Post Compile Build Target                                       -->
  <!-- ============================================================== -->
  <target name="postCompile">

  </target>

  <!-- ============================================================== -->
  <!-- Pre Jar Build Target                                       -->
  <!-- ============================================================== -->
  <target name="ivy-runtime" depends="ivy-settings" unless="ivy.runtime.run">
    <mkdir dir="${project.lib.dir}/runtime"/>

    <ivy:resolve file="ivy.xml" conf="runtime" />
    <ivy:retrieve conf="runtime" pattern="${project.lib.dir}/[conf]/[artifact]-[revision].[ext]" />


    <move todir="${project.lib.dir}/runtime">
      <fileset dir="${project.lib.dir}/runtime">
        <include name="*-working@*.jar" />
      </fileset>
      <mapper type="regexp" from="^(.*)\-working\@(.*)\.jar$" to="\1.jar" />
    </move>
    <property name="ivy.runtime.run" value="t"/>
  </target>
  <target name="preJar" depends="ivy-runtime">
  </target>

  <!-- ============================================================== -->
  <!-- Post Jar Build Target                                          -->
  <!-- ============================================================== -->
  <target name="postJar">


  </target>

  <!-- ============================================================== -->
  <!-- Pre Compile Tests Build Target                                 -->
  <!-- ============================================================== -->
  <!-- this doesnt need to depend on ivy-test because the inspect target already invokes it.... and the way
       things are wired ANT doesnt know its already run -->
  <target name="preCompileTests">
    <!-- copy all the unit testing stuff for the compile.  heavy handed only need mockrunner.  rethink this -->



    <copy overwrite="true" toDir="${test.build.dest}">
      <fileset dir="test/resources" casesensitive="yes">
        <include name="*.*" />
      </fileset>

    </copy>

    <copy overwrite="true" toDir="${test.lib.dir}">
      <fileset dir="${project.lib.dir}/test" casesensitive="yes">
        <include name="*.*" />
      </fileset>

    </copy>
    <!-- for find bugs -->
    <mkdir dir="${project.lib.dir}/compile"/>
    <copy toDir="${project.lib.dir}/compile">
      <fileset dir="lib" casesensitive="yes">
        <include name="*.jar" />
      </fileset>

    </copy>


  </target>

  <!-- ============================================================== -->
  <!-- Post Compile Tests Build Target                                -->
  <!-- ============================================================== -->
  <target name="postCompileTests">
  </target>

  <!-- ============================================================== -->
  <!-- Pre Jar Tests Build Target                                     -->
  <!-- ============================================================== -->
  <target name="preJarTests">

  </target>

  <!-- ============================================================== -->
  <!-- Post Jar Tests Build Target                                    -->
  <!-- ============================================================== -->
  <target name="postJarTests">
    <!-- just core-grid-transfer client classpath -->
    <zip destfile="client-jars-nodeps.zip">
      <fileset dir="lib">
        <include name="ncia-beans.jar" />
      </fileset>

      <fileset dir="build/lib">
        <include name="NCIACoreService-*.jar" />

        <exclude name="NCIACoreService-tests.jar" />

      </fileset>

      <fileset dir="${project.lib.dir}/runtime">
        <include name="nbia-services-grid.jar" />
      </fileset>
    </zip>

    <!-- full client classpath -->
    <zip destfile="client-jars-full.zip">
      <fileset dir="lib">
        <include name="ncia-beans.jar" />
      </fileset>
      <fileset dir="build/lib">
        <include name="NCIACoreService-*.jar" />
        <!--
        <exclude name="NCIACoreService-tests.jar" />
        -->
      </fileset>

      <fileset dir="${project.lib.dir}/runtime">
        <include name="nbia-services-grid.jar" />
        <include name="log4j*.jar" />
      </fileset>

      <fileset dir="${ext.globus.dir}/lib">
        <include name="addressing-1.0.jar"/>
        <include name="addressing-1.0.jar"/>
        <include name="axis.jar"/>
        <include name="cog-axis.jar"/>
        <include name="cog-jglobus.jar"/>
        <include name="commons-discovery.jar"/>
        <include name="commons-logging.jar"/>
        <include name="jaxrpc.jar"/>
        <include name="jce-jdk13-125.jar"/>
        <include name="saaj.jar"/>
        <include name="wsdl4j.jar"/>
        <include name="wsrf_core.jar"/>
        <include name="wsrf_core_stubs.jar"/>
        <include name="wss4j.jar"/>
      </fileset>

      <fileset dir="lib">
        <include name="caGrid-ServiceSecurityProvider-client-1.3.jar"/>
        <include name="caGrid-ServiceSecurityProvider-common-1.3.jar"/>
        <include name="caGrid-ServiceSecurityProvider-service-1.3.jar"/>
        <include name="caGrid-ServiceSecurityProvider-stubs-1.3.jar"/>
        <include name="caGrid-Transfer-client-1.3.jar"/>
        <include name="caGrid-Transfer-common-1.3.jar"/>
        <include name="caGrid-Transfer-service-1.3.jar"/>
        <include name="caGrid-Transfer-stubs-1.3.jar"/>
        <include name="caGrid-Transfer-tests-1.3.jar"/>
        <include name="caGrid-data-common-1.3.jar"/>
        <include name="caGrid-data-cql-1.3.jar"/>
        <include name="caGrid-data-service-1.3.jar"/>
        <include name="caGrid-data-stubs-1.3.jar"/>
        <include name="caGrid-data-tools-1.3.jar"/>
        <include name="caGrid-data-utils-1.3.jar"/>
        <include name="caGrid-data-validation-1.3.jar"/>
        <include name="caGrid-metadata-common-1.3.jar"/>
        <include name="caGrid-metadata-data-1.3.jar"/>
        <include name="caGrid-metadata-security-1.3.jar"/>
        <include name="caGrid-metadatautils-1.3.jar"/>
        <include name="caGrid-sdkQuery4-beans-1.3.jar"/>
        <include name="caGrid-sdkQuery4-processor-1.3.jar"/>
        <include name="caGrid-sdkQuery4-style-1.3.jar"/>
        <include name="caGrid-sdkQuery4-tests-1.3.jar"/>
        <include name="caGrid-sdkQuery4-tests-resources-1.3.jar"/>
        <include name="commons-httpclient-3.0.jar"/>
        <include name="iviCore-1.2dev.jar"/>
        <include name="caGrid-core-1.3.jar"/>
      </fileset>

      <fileset dir="lib/secure">
        <include name="caGrid-authentication-service-client-1.3.jar"/>
        <include name="caGrid-authentication-service-common-1.3.jar"/>
        <include name="caGrid-authentication-service-stubs-1.3.jar"/>
        <include name="caGrid-cds-stubs-1.3.jar"/>
        <include name="caGrid-dorian-client-1.3.jar"/>
        <include name="caGrid-dorian-common-1.3.jar"/>
        <include name="caGrid-dorian-stubs-1.3.jar"/>
        <include name="caGrid-gaards-core-1.3.jar"/>
        <include name="caGrid-opensaml-1.3.jar"/>
        <include name="commons-codec-1.3.jar"/>
        <include name="commons-httpclient-3.0.jar"/>
      </fileset>

      <fileset dir="${ext.globus.dir}/lib">
        <include name="cryptix.jar"/>
        <include name="cryptix32.jar"/>
        <include name="cryptix-asn1.jar"/>
        <include name="opensaml.jar"/>
        <include name="puretls.jar"/>
        <include name="xmlsec.jar"/>
        <include name="xalan.jar"/>
      </fileset>

      <zipfileset dir="lib/secure/endorsed"
                  prefix="endorsed">
        <include name="resolver.jar"/>
        <include name="xercesImpl.jar"/>
        <include name="xml-apis.jar"/>
      </zipfileset>

    </zip>
  </target>

  <!-- ============================================================== -->
  <!-- Pre Clean Target                                               -->
  <!-- ============================================================== -->
  <target name="preClean">

  </target>

  <!-- ============================================================== -->
  <!-- Post Clean Target                                              -->
  <!-- ============================================================== -->
  <target name="postClean">

  </target>


  <!-- ============================================================== -->
  <!-- Call any tests.                                                -->
  <!-- ============================================================== -->
  <!-- replaced by something in unittesting.xml -->
  <!--
  <target name="test" depends="checkGlobus" description="Runs the service's tests.">
    <echo message="Test results dir: ${junit.results.dir}" />
    <mkdir dir="${junit.results.dir}" />
    <junit dir="${basedir}" printsummary="yes" showoutput="true">
      <classpath refid="test.run.classpath" />
      <formatter type="xml" />
      <batchtest fork="yes" todir="${junit.results.dir}">
        <fileset dir="${test.src.dir}">
          <include name="**/Test*.java" />
          <include name="**/*TestCase.java" />
        </fileset>
      </batchtest>
    </junit>
  </target>
  -->

</project>